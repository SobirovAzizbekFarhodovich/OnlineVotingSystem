// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/candidate": {
            "put": {
                "description": "Endpoint for updating a Candidate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Candidate"
                ],
                "summary": "Update Candidate",
                "parameters": [
                    {
                        "description": "Update Candidate",
                        "name": "candidate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.UpdateCandidateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated Candidate",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update Candidate",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Endpoint for creating a new Candidate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Candidate"
                ],
                "summary": "Create Candidate",
                "parameters": [
                    {
                        "description": "Candidate create",
                        "name": "candidate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.CreateCandidateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created Candidate",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create Candidate",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/candidate/{id}": {
            "get": {
                "description": "Endpoint for getting a Candidate by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Candidate"
                ],
                "summary": "Get Candidate by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Candidate ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched Candidate",
                        "schema": {
                            "$ref": "#/definitions/genproto.GetByIdCandidateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get Candidate",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Endpoint for deleting a Candidate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Candidate"
                ],
                "summary": "Delete Candidate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Candidate ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted Candidate",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete Candidate",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/candidates": {
            "get": {
                "description": "Endpoint for getting all Candidates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Candidate"
                ],
                "summary": "Get All Candidates",
                "responses": {
                    "200": {
                        "description": "Successfully fetched Candidates",
                        "schema": {
                            "$ref": "#/definitions/genproto.GetAllCandidatesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get Candidates",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/election": {
            "put": {
                "description": "Endpoint for updating an Election",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Update Election",
                "parameters": [
                    {
                        "description": "Update Election",
                        "name": "election",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.UpdateElectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated Election",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update Election",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Endpoint for creating a new Election",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Create Election",
                "parameters": [
                    {
                        "description": "Election create",
                        "name": "election",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.Election"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created Election",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create Election",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/election/{id}": {
            "get": {
                "description": "Endpoint for getting an Election by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Get Election by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Election ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched Election",
                        "schema": {
                            "$ref": "#/definitions/genproto.GetElectionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get Election",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Endpoint for deleting an Election",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Delete Election",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Election ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted Election",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete Election",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/elections": {
            "get": {
                "description": "Endpoint for getting all Elections",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Election"
                ],
                "summary": "Get Elections",
                "responses": {
                    "200": {
                        "description": "Successfully fetched Elections",
                        "schema": {
                            "$ref": "#/definitions/genproto.GetAllElectionsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get Elections",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/parties": {
            "get": {
                "description": "Endpoint for fetching all parties",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Get All Parties",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched all parties",
                        "schema": {
                            "$ref": "#/definitions/genproto.GetAllPartyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch all parties",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/party": {
            "put": {
                "description": "Endpoint for updating a party",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Update Party",
                "parameters": [
                    {
                        "description": "Party Update request payload",
                        "name": "party",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.UpdatePartyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated party",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Endpoint for creating a new party",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Create Parties",
                "parameters": [
                    {
                        "description": "Party creation request payload",
                        "name": "party",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.CreatePartyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created party",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/party/{id}": {
            "get": {
                "description": "Endpoint for fetching a party by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Get Party by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Party ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched party",
                        "schema": {
                            "$ref": "#/definitions/genproto.GetPartyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Endpoint for deleting a party",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Delete Party",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Party ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted party",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/publicvote": {
            "put": {
                "description": "Endpoint for updating a Public Vote",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PublicVote"
                ],
                "summary": "Update Public Vote",
                "parameters": [
                    {
                        "description": "Update Public Vote",
                        "name": "publicvote",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.UpdatePublicVoteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated Public Vote",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update Public Vote",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Endpoint for creating a new Public Vote",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PublicVote"
                ],
                "summary": "Create Public Vote",
                "parameters": [
                    {
                        "description": "Public Vote create",
                        "name": "publicvote",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.CreatePublicVoteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created Public Vote",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create Public Vote",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/publicvote/{id}": {
            "get": {
                "description": "Endpoint for getting a Public Vote by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PublicVote"
                ],
                "summary": "Get Public Vote by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Public Vote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched Public Vote",
                        "schema": {
                            "$ref": "#/definitions/genproto.PublicVote"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get Public Vote",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Endpoint for deleting a Public Vote",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PublicVote"
                ],
                "summary": "Delete Public Vote",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Public Vote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted Public Vote",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete Public Vote",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/publicvotes": {
            "get": {
                "description": "Endpoint for getting all Public Votes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PublicVote"
                ],
                "summary": "Get All Public Votes",
                "responses": {
                    "200": {
                        "description": "Successfully fetched Public Votes",
                        "schema": {
                            "$ref": "#/definitions/genproto.GetPublicVoteResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get Public Votes",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "genproto.Candidate": {
            "type": "object",
            "properties": {
                "election_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "party_id": {
                    "type": "string"
                },
                "public_id": {
                    "type": "string"
                }
            }
        },
        "genproto.CreateCandidateRequest": {
            "type": "object",
            "properties": {
                "election_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "party_id": {
                    "type": "string"
                },
                "public_id": {
                    "type": "string"
                }
            }
        },
        "genproto.CreatePartyRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "opened_date": {
                    "type": "string"
                },
                "slogan": {
                    "type": "string"
                }
            }
        },
        "genproto.CreatePublicVoteReq": {
            "type": "object",
            "properties": {
                "candidate_id": {
                    "type": "string"
                },
                "election_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "public_id": {
                    "type": "string"
                }
            }
        },
        "genproto.Election": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "genproto.GetAllCandidate": {
            "type": "object",
            "properties": {
                "election": {
                    "$ref": "#/definitions/genproto.Election"
                },
                "id": {
                    "type": "string"
                },
                "party_id": {
                    "type": "string"
                },
                "public_id": {
                    "type": "string"
                }
            }
        },
        "genproto.GetAllCandidatesResponse": {
            "type": "object",
            "properties": {
                "candidates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.GetAllCandidate"
                    }
                }
            }
        },
        "genproto.GetAllElectionsResponse": {
            "type": "object",
            "properties": {
                "elections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.Election"
                    }
                }
            }
        },
        "genproto.GetAllPartyResponse": {
            "type": "object",
            "properties": {
                "parties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.GetPartyResponse"
                    }
                }
            }
        },
        "genproto.GetByIdCandidateResponse": {
            "type": "object",
            "properties": {
                "candidate": {
                    "$ref": "#/definitions/genproto.GetAllCandidate"
                }
            }
        },
        "genproto.GetElectionResponse": {
            "type": "object",
            "properties": {
                "election": {
                    "$ref": "#/definitions/genproto.Election"
                }
            }
        },
        "genproto.GetPartyResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "opened_date": {
                    "type": "string"
                },
                "slogan": {
                    "type": "string"
                }
            }
        },
        "genproto.GetPublicVoteResponse": {
            "type": "object",
            "properties": {
                "public_vote": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.PublicVote"
                    }
                }
            }
        },
        "genproto.PublicVote": {
            "type": "object",
            "properties": {
                "election": {
                    "$ref": "#/definitions/genproto.Election"
                },
                "id": {
                    "type": "string"
                },
                "public_id": {
                    "type": "string"
                }
            }
        },
        "genproto.UpdateCandidateRequest": {
            "type": "object",
            "properties": {
                "candidate": {
                    "$ref": "#/definitions/genproto.Candidate"
                }
            }
        },
        "genproto.UpdateElectionRequest": {
            "type": "object",
            "properties": {
                "election": {
                    "$ref": "#/definitions/genproto.Election"
                }
            }
        },
        "genproto.UpdatePartyRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "opened_date": {
                    "type": "string"
                },
                "slogan": {
                    "type": "string"
                }
            }
        },
        "genproto.UpdatePublicVoteRequest": {
            "type": "object",
            "properties": {
                "public_vote": {
                    "$ref": "#/definitions/genproto.CreatePublicVoteReq"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
