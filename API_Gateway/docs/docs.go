// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/party": {
            "get": {
                "description": "GetAll",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "GetAllParties",
                "parameters": [
                    {
                        "description": "Party GetAll request payload",
                        "name": "party",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.FilterPartyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Get All party",
                        "schema": {
                            "$ref": "#/definitions/voting.GetAllPartyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to Get All party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update Party elements",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Update Party",
                "parameters": [
                    {
                        "description": "Party Update request payload",
                        "name": "party",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.GetPartyResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Update party",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to Update party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Endpoint for creating a new parties",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Create Parties",
                "parameters": [
                    {
                        "description": "Party creation request payload",
                        "name": "party",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.CreatePartyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created party",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/party/:id": {
            "get": {
                "description": "GetAll",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "GetByIdParty",
                "parameters": [
                    {
                        "description": "Party GetById request payload",
                        "name": "party",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.ByIdPartyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Get All party",
                        "schema": {
                            "$ref": "#/definitions/voting.GetPartyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to Get All party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Party elements",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Party"
                ],
                "summary": "Delete Party",
                "parameters": [
                    {
                        "description": "Party Delete request payload",
                        "name": "party",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.ByIdPartyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Delete party",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to Delete party",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/public": {
            "get": {
                "description": "Get All Public",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Get All Public",
                "parameters": [
                    {
                        "description": "GetAllPublic",
                        "name": "public",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.FilterPublicRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Get All Public",
                        "schema": {
                            "$ref": "#/definitions/voting.GetAllPublicResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to Get All public",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update Public",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Update Public",
                "parameters": [
                    {
                        "description": "UpdatePublic",
                        "name": "public",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.GetPublicResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Update Public",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to Update public",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Endpoint for creating a new Public",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Create Public",
                "parameters": [
                    {
                        "description": "Public create",
                        "name": "public",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.CreatePublicRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created public",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create public",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/public/:id": {
            "get": {
                "description": "Get Public",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Get Public",
                "parameters": [
                    {
                        "description": "Get Public",
                        "name": "public",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.ByIdPublicRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Get Public",
                        "schema": {
                            "$ref": "#/definitions/voting.GetPublicResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to Get public",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Public",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Delete Public",
                "parameters": [
                    {
                        "description": "DeletePublic",
                        "name": "public",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/voting.ByIdPublicRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully Delete Public",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to Delete public",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "voting.ByIdPartyRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "voting.ByIdPublicRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "voting.CreatePartyRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "opened_date": {
                    "type": "string"
                },
                "slogan": {
                    "type": "string"
                }
            }
        },
        "voting.CreatePublicRequest": {
            "type": "object",
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nation": {
                    "type": "string"
                },
                "party_id": {
                    "type": "string"
                }
            }
        },
        "voting.FilterPartyRequest": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                }
            }
        },
        "voting.FilterPublicRequest": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                }
            }
        },
        "voting.GetAllPartyResponse": {
            "type": "object",
            "properties": {
                "parties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/voting.GetPartyResponse"
                    }
                }
            }
        },
        "voting.GetAllPublicResponse": {
            "type": "object",
            "properties": {
                "publics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/voting.GetPublicResponse"
                    }
                }
            }
        },
        "voting.GetPartyResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "opened_date": {
                    "type": "string"
                },
                "slogan": {
                    "type": "string"
                }
            }
        },
        "voting.GetPublicResponse": {
            "type": "object",
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nation": {
                    "type": "string"
                },
                "party_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,

}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
